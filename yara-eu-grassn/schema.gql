# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @key(fields: String!) on OBJECT | INTERFACE

directive @extends on OBJECT | INTERFACE

directive @external on OBJECT | FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

"""Delete result structure"""
type DeleteResult {
  id: String!
  message: String
  success: Boolean!
}

"""Returned response from queries"""
type Organization {
  """Entity unique identifier"""
  id: ID!

  """Name of the organization"""
  name: String!

  """Date of creation"""
  created: DateTime!

  """Last date of modification"""
  modified: DateTime!

  """User who made last modification"""
  modifiedBy: String!

  """Date of deletion"""
  deleted: DateTime
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ManyOrganizationResult {
  cursor: Int
  hasNextPage: Boolean
  entities: [Organization!]!
}

"""Returned response from queries"""
type Farm {
  """Entity unique identifier"""
  id: ID!

  """Name of the farm"""
  name: String!

  """id of the organisation"""
  organizationId: String!

  """id of the country"""
  countryId: String!

  """Date of creation"""
  created: DateTime!

  """Last date of modification"""
  modified: DateTime!

  """User who made last modification"""
  modifiedBy: String!

  """Date of deletion"""
  deleted: DateTime
}

type ManyFarmResult {
  cursor: Int
  hasNextPage: Boolean
  entities: [Farm!]!
}

"""Returned response from queries"""
type Harvest {
  """Entity unique identifier"""
  id: ID!

  """Name of the harvest"""
  farmId: String!

  """Name of the harvest"""
  fieldId: String!

  """Name of the harvest"""
  date: String!

  """Name of the harvest"""
  crudeProteinContent: String!

  """Name of the harvest"""
  dryMatterYield: String!

  """Date of creation"""
  created: DateTime!

  """Last date of modification"""
  modified: DateTime!

  """User who made last modification"""
  modifiedBy: String!

  """Date of deletion"""
  deleted: DateTime
}

type ManyHarvestResult {
  cursor: Int
  hasNextPage: Boolean
  entities: [Harvest!]!
}

"""Returned response from queries"""
type FarmField {
  """Entity unique identifier"""
  id: ID!

  """Name of the farm"""
  name: String!

  """farm id of the field"""
  farmId: String!

  """area of the field"""
  area: Float!

  """Date of creation"""
  created: DateTime!

  """Last date of modification"""
  modified: DateTime!

  """User who made last modification"""
  modifiedBy: String!

  """Date of deletion"""
  deleted: DateTime
}

type ManyFarmFieldResult {
  cursor: Int
  hasNextPage: Boolean
  entities: [FarmField!]!
}

"""Returned response from queries"""
type Fertilization {
  """Entity unique identifier"""
  id: ID!

  """Name of the fertilization"""
  farmId: String!

  """Name of the fertilization"""
  fieldId: String!

  """Name of the fertilization"""
  date: String!

  """Name of the fertilization"""
  fertilizerId: String!

  """Name of the fertilization"""
  amount: Float!

  """Name of the fertilization"""
  location: String!

  """Date of creation"""
  created: DateTime!

  """Last date of modification"""
  modified: DateTime!

  """User who made last modification"""
  modifiedBy: String!

  """Date of deletion"""
  deleted: DateTime
}

type ManyFertilizationResult {
  cursor: Int
  hasNextPage: Boolean
  entities: [Fertilization!]!
}

type Query {
  """Query to get all entities depending on given filters"""
  organizations(
    filter: [GenericFilter] = []
    paging: Pagination = {size: 1000}
    sorting: [Sorting]

    """Supported filter operators for joining the filters"""
    filterOperatorType: OperatorType
  ): ManyOrganizationResult!

  """Query to get single entity depending on the given id"""
  organization(id: ID!): Organization

  """Query to get all entities depending on given filters"""
  farms(
    filter: [GenericFilter] = []
    paging: Pagination = {size: 1000}
    sorting: [Sorting]

    """Supported filter operators for joining the filters"""
    filterOperatorType: OperatorType
  ): ManyFarmResult!

  """Query to get single entity depending on the given id"""
  farm(id: ID!): Farm

  """Query to get all entities depending on given filters"""
  harvests(
    filter: [GenericFilter] = []
    paging: Pagination = {size: 1000}
    sorting: [Sorting]

    """Supported filter operators for joining the filters"""
    filterOperatorType: OperatorType
  ): ManyHarvestResult!

  """Query to get single entity depending on the given id"""
  harvest(id: ID!): Harvest

  """Query to get all entities depending on given filters"""
  fields(
    filter: [GenericFilter] = []
    paging: Pagination = {size: 1000}
    sorting: [Sorting]

    """Supported filter operators for joining the filters"""
    filterOperatorType: OperatorType
  ): ManyFarmFieldResult!

  """Query to get single entity depending on the given id"""
  field(id: ID!): FarmField

  """Query to get all entities depending on given filters"""
  fertilizations(
    filter: [GenericFilter] = []
    paging: Pagination = {size: 1000}
    sorting: [Sorting]

    """Supported filter operators for joining the filters"""
    filterOperatorType: OperatorType
  ): ManyFertilizationResult!

  """Query to get single entity depending on the given id"""
  fertilization(id: ID!): Fertilization
}

"""
Filter that applies to the requested data based on the column name and filters
"""
input GenericFilter {
  """Column that will be filtered on"""
  key: String!

  """Filter type"""
  type: FilterType!

  """Filters which will be applied on the specified column"""
  value: String!
}

enum FilterType {
  EQ
  NE
  LT
  GT
  LIKE
  IN
  NOTIN
}

input Pagination {
  size: Int!
  cursor: Int
}

input Sorting {
  column: String!
  orderDirection: OrderDirection = ASC
}

enum OrderDirection {
  ASC
  DESC
}

enum OperatorType {
  AND
  OR
}

type Mutation {
  """Update specific entity based on the input"""
  createOrganization(input: OrganizationInput!): Organization!

  """Insert specific entity based on the input"""
  updateOrganization(input: OrganizationInput!): Organization!

  """Soft delete entity based on the given id"""
  deleteOrganization(filterColumn: String, id: ID!): DeleteResult!

  """Update specific entity based on the input"""
  createFarm(input: FarmInput!): Farm!

  """Insert specific entity based on the input"""
  updateFarm(input: FarmInput!): Farm!

  """Soft delete entity based on the given id"""
  deleteFarm(filterColumn: String, id: ID!): DeleteResult!

  """Update specific entity based on the input"""
  createHarvest(input: HarvestInput!): Harvest!

  """Insert specific entity based on the input"""
  updateHarvest(input: HarvestInput!): Harvest!

  """Soft delete entity based on the given id"""
  deleteHarvest(filterColumn: String, id: ID!): DeleteResult!

  """Update specific entity based on the input"""
  createFarmField(input: FarmFieldInput!): FarmField!

  """Insert specific entity based on the input"""
  updateFarmField(input: FarmFieldInput!): FarmField!

  """Soft delete entity based on the given id"""
  deleteFarmField(filterColumn: String, id: ID!): DeleteResult!

  """Update specific entity based on the input"""
  createFertilization(input: FertilizationInput!): Fertilization!

  """Insert specific entity based on the input"""
  updateFertilization(input: FertilizationInput!): Fertilization!

  """Soft delete entity based on the given id"""
  deleteFertilization(filterColumn: String, id: ID!): DeleteResult!
}

"""Request details for insert and updates"""
input OrganizationInput {
  """Entity unique identifier"""
  id: ID

  """Name of the organization"""
  name: String!
}

"""Request details for insert and updates"""
input FarmInput {
  """Entity unique identifier"""
  id: ID

  """Name of the farm"""
  name: String!
}

"""Request details for insert and updates"""
input HarvestInput {
  """Entity unique identifier"""
  id: ID

  """Name of the harvest"""
  name: String!
}

"""Request details for insert and updates"""
input FarmFieldInput {
  """Entity unique identifier"""
  id: ID

  """Name of the field"""
  name: String!
}

"""Request details for insert and updates"""
input FertilizationInput {
  """Entity unique identifier"""
  id: ID

  """Name of the fertilization"""
  name: String!
}
